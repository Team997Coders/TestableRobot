plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.1.1-beta-2a"
}

def ROBOT_CLASS = "frc.robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Needed to drag down testing framework...what I do not yet know is how
// this will behave at competition when workstation is not connected to
// the Internet. Need to test behavior...
repositories {
    mavenLocal()
    mavenCentral()
}

wpi {
    wpilibVersion = '2019.424242.1.1-beta-2-20181201090520-19-g9bc1054-dirty'
}


project.repositories.maven { repo ->
    repo.name = "WPI"
    repo.url = "http://first.wpi.edu/FRC/roborio/maven/release"
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile javaVendorLibraries()
    nativeZip jniRoboRIOVendorLibraries()
    nativeDesktopZip jniDesktopVendorLibraries()
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    testImplementation 'org.mockito:mockito-core:2.23.4'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

test {
    useJUnitPlatform()
}

// Force Java 8 Compatibility mode for deployed code, in case the develoment
// system is using Java 10.
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

sourceSets {
    test {
        java.srcDir 'src/main/java/frc/robot/test' // tests in main shall contain your tests...usually put them in /src/test/java/...
    }
    main {
        java.exclude 'frc/robot/test/**' // exclude from main source set 
    }
}

wrapper {
    gradleVersion = '4.9'
}
